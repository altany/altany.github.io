I"’<<p>A few months ago, Facebook announced the release of <strong>React Native 0.61</strong>.</p>

<p>Version 0.61 seems to be solving several issues that stopped my team from upgrading to 0.60 earlier. All seemed to be going well until I tried to run the testsâ€¦</p>

<p>Prior to React Native 0.61, haste was used to map the individual module files. In haste the mapping is done by filename so itâ€™s easy enough to find the corresponding file in the react-native repo. So, to mock a module, we could simply do something like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">"</span><span class="s2">Button</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div></div>

<p>React Native 0.61 dropped support for haste, whic means that all these mocks donâ€™t work anymore and we started getting a bunch of errors such as:</p>

<blockquote>
  <p><strong>Cannot find module â€˜Buttonâ€™</strong></p>
</blockquote>

<p>The React team recommends <a href="https://github.com/facebook/react-native/issues/26579#issuecomment-535244001">two ways for mocking react-native modules</a>:</p>

<ol>
  <li>Specify the full path to the module e.g.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="dl">"</span><span class="s2">react-native/Libraries/Components/Button</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div>    </div>
  </li>
  <li>Mock out the react-native interface</li>
</ol>

<p>The first approach seems to be the most popular, especially when mocking individual modules. However, I am not a fan of it, because it is a brittle approach that creates coupling between the test and the internal path. Besides, I wasnâ€™t really able to make it work properly.</p>

<p>The second approach seems to be the correct one. The suggested implementation is to mock react-native inside <code class="highlighter-rouge">setup.js</code>, <a href="https://github.com/facebook/react-native/issues/26579#issuecomment-538610849">such as</a>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">ReactNative</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">jest</span><span class="p">.</span><span class="nx">doMock</span><span class="p">(</span><span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// Extend ReactNative</span>
  <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span>
    <span class="p">{</span>
      <span class="c1">// Redefine an export, like a component</span>
      <span class="na">Button</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Button</span><span class="dl">"</span><span class="p">,</span>
      <span class="c1">// Mock out properties of an already mocked export</span>
      <span class="na">LayoutAnimation</span><span class="p">:</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">ReactNative</span><span class="p">.</span><span class="nx">LayoutAnimation</span><span class="p">,</span>
        <span class="na">configureNext</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()</span>
      <span class="p">},</span>
      <span class="na">Platform</span><span class="p">:</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">ReactNative</span><span class="p">.</span><span class="nx">Platform</span><span class="p">,</span>
        <span class="na">OS</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ios</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">Version</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
        <span class="na">isTesting</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">select</span><span class="p">:</span> <span class="nx">objs</span> <span class="o">=&gt;</span> <span class="nx">objs</span><span class="p">[</span><span class="dl">"</span><span class="s2">ios</span><span class="dl">"</span><span class="p">]</span>
      <span class="p">},</span>
      <span class="c1">// Mock a native module</span>
      <span class="na">NativeModules</span><span class="p">:</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">ReactNative</span><span class="p">.</span><span class="nx">NativeModules</span><span class="p">,</span>
        <span class="na">Override</span><span class="p">:</span> <span class="p">{</span> <span class="na">great</span><span class="p">:</span> <span class="dl">"</span><span class="s2">success</span><span class="dl">"</span> <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">ReactNative</span>
  <span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>I had issues when I followed this approach and my tests didnâ€™t seem to get mocked properly. For example, when I tried to access the value of <code class="highlighter-rouge">Platform.OS</code> I would get this error:</p>

<blockquote>
  <p><strong>â€˜Couldnâ€™t read OS of undefinedâ€™</strong></p>
</blockquote>

<p>What worked for me instead was to mock react-native manually inside the <code class="highlighter-rouge">__mocks__</code> folder. So I created a <code class="highlighter-rouge">react-native.js</code> file with this content:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">ReactNative</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">alert</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">();</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Alert</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">alert</span> <span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">dimensionWidth</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Dimensions</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">get</span><span class="p">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">().</span><span class="nx">mockReturnValue</span><span class="p">({</span> <span class="na">width</span><span class="p">:</span> <span class="nx">dimensionWidth</span><span class="p">,</span> <span class="na">height</span><span class="p">:</span> <span class="mi">100</span> <span class="p">})</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Image</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Image</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">keyboardDismiss</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">();</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">Keyboard</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">dismiss</span><span class="p">:</span> <span class="nx">keyboardDismiss</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">Platform</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">...</span><span class="nx">ReactNative</span><span class="p">.</span><span class="nx">Platform</span><span class="p">,</span>
  <span class="na">OS</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ios</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">Version</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
  <span class="na">isTesting</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">select</span><span class="p">:</span> <span class="nx">objs</span> <span class="o">=&gt;</span> <span class="nx">objs</span><span class="p">[</span><span class="dl">"</span><span class="s2">ios</span><span class="dl">"</span><span class="p">]</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span>
  <span class="p">{</span>
    <span class="nx">Alert</span><span class="p">,</span>
    <span class="nx">Dimensions</span><span class="p">,</span>
    <span class="nx">Image</span><span class="p">,</span>
    <span class="nx">Keyboard</span><span class="p">,</span>
    <span class="nx">Platform</span>
  <span class="p">},</span>
  <span class="nx">ReactNative</span>
<span class="p">);</span>
</code></pre></div></div>

<p>I added exports for all the react-native modules that were imported in tested files, one by one, and was able to get rid off the errors.</p>

<p>Also, I exported mocks of any methods as needed to help me test when they were called.</p>

<p>For example, I can now do:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">alert</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">showAlert() calls Alert.alert</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">showAlert</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">alert</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>And it works like a charm!</p>

<p>However, soon I came across another obstacle. I need to be able to mock platform detection. By default, we mock Platform.OS to be <code class="highlighter-rouge">ios</code>, but not only there were cases that we needed to test scenarios for Android, we are also using react-native for the web. It was really important to be able to test our web app as well.</p>

<p>Before upgrading, we have been using a method that overwrites the OS property of Platform like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">mockPlatform</span> <span class="o">=</span> <span class="nx">OS</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">jest</span><span class="p">.</span><span class="nx">resetModules</span><span class="p">();</span>
  <span class="nx">jest</span><span class="p">.</span><span class="nx">doMock</span><span class="p">(</span><span class="dl">"</span><span class="s2">Platform</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="nx">OS</span><span class="p">,</span> <span class="na">select</span><span class="p">:</span> <span class="nx">objs</span> <span class="o">=&gt;</span> <span class="nx">objs</span><span class="p">[</span><span class="nx">OS</span><span class="p">]</span> <span class="p">}));</span>
<span class="p">};</span>
</code></pre></div></div>

<p>And we would call</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mockPlatform</span><span class="p">(</span><span class="dl">'</span><span class="s1">android</span><span class="dl">''</span><span class="s1">
</span></code></pre></div></div>

<p>or</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mockPlatform</span><span class="p">(</span><span class="dl">"</span><span class="s2">web</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>before the test.</p>

<p>Unfortunately, after upgrading to 0.61, this also stopped working. The solution turned out to be very simple, even simpler than our previous approach.</p>

<p>To change the OS in a test, first we import the module like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Platform</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-native</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>and then simply overwrite the platform inside the test</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">renders Element if Android</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">Platform</span><span class="p">.</span><span class="nx">OS</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">android</span><span class="dl">'</span>
  <span class="nx">renderIfAndroid</span><span class="p">()</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">Element</span><span class="p">)).</span><span class="nx">exists</span><span class="p">()).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
<span class="p">})</span>

</code></pre></div></div>

<p>Using the above setup, we have finally been able to mock our modules properly and are one step closer to the react-native 0.61 upgrade.</p>
:ET